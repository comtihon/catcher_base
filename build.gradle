buildscript {
    ext {
        kotlinVersion = '1.6.21'
        springBootVersion = '2.7.0'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.catcher'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

def webappDir = "$projectDir/src/main/webapp"
sourceSets {
    main {
        resources {
            srcDirs = ["$webappDir/dist", "$projectDir/src/main/resources"]
        }
    }
    test_integration {
        kotlin {
            compileClasspath += sourceSets["main"].output + configurations["testRuntimeClasspath"]
            runtimeClasspath += output + compileClasspath + sourceSets["test"].runtimeClasspath
            srcDir file('src/test_integration/kotlin')
        }
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/test_integration/java')
        }
        resources.srcDir file('src/test_integration/resources')
    }
}

configurations {
    test_integrationTestCompile.extendsFrom testCompile
    test_integrationTestRuntime.extendsFrom testRuntime
    test_integrationImplementation.extendsFrom implementation
}

dependencies {
    implementation 'org.webjars:bootstrap:5.1.3'
    implementation 'org.webjars:webjars-locator-core'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation('org.springframework.boot:spring-boot-starter-jdbc')
//	implementation 'org.springframework.boot:spring-boot-starter-data-ldap'
//	implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'


    implementation group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '6.1.0.202203080745-r'

    implementation 'org.springframework.boot:spring-boot-starter-web'
//	implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.flywaydb:flyway-core:8.5.12'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:postgresql:1.17.2'
    testImplementation 'com.h2database:h2:2.1.212'
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}

test {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

task test_integration(type: Test) {
    testClassesDirs = sourceSets.test_integration.output.classesDirs
    classpath = sourceSets.test_integration.runtimeClasspath
}

check.dependsOn test_integration

processResources {
    filesMatching("**/application.yml") {
        expand(project.properties)
    }
    dependsOn "buildAngular"
}

task buildAngular(type: Exec) {
    // installAngular should be run prior to this task
    dependsOn "installAngular"
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    // Add task to the standard build group
    group = BasePlugin.BUILD_GROUP
    // ng doesn't exist as a file in windows -> ng.cmd
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "ng.cmd", "build"
    } else {
        commandLine "ng", "build"
    }
}

task installAngular(type: Exec) {
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "npm.cmd", "install"
    } else {
        commandLine "npm", "install"
    }
}

tasks.withType(Copy).all { duplicatesStrategy 'exclude' }